package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ascend.wangfeng.locationbyhand.bean.dbBean.ConnectRelation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONNECT_RELATION".
*/
public class ConnectRelationDao extends AbstractDao<ConnectRelation, Long> {

    public static final String TABLENAME = "CONNECT_RELATION";

    /**
     * Properties of entity ConnectRelation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ap = new Property(1, String.class, "ap", false, "AP");
        public final static Property Mac = new Property(2, String.class, "mac", false, "MAC");
        public final static Property TimeStart = new Property(3, long.class, "timeStart", false, "TIME_START");
        public final static Property TimeEnd = new Property(4, long.class, "timeEnd", false, "TIME_END");
        public final static Property Count = new Property(5, Integer.class, "count", false, "COUNT");
    };


    public ConnectRelationDao(DaoConfig config) {
        super(config);
    }
    
    public ConnectRelationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONNECT_RELATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AP\" TEXT," + // 1: ap
                "\"MAC\" TEXT," + // 2: mac
                "\"TIME_START\" INTEGER NOT NULL ," + // 3: timeStart
                "\"TIME_END\" INTEGER NOT NULL ," + // 4: timeEnd
                "\"COUNT\" INTEGER);"); // 5: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONNECT_RELATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConnectRelation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ap = entity.getAp();
        if (ap != null) {
            stmt.bindString(2, ap);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(3, mac);
        }
        stmt.bindLong(4, entity.getTimeStart());
        stmt.bindLong(5, entity.getTimeEnd());
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(6, count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConnectRelation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ap = entity.getAp();
        if (ap != null) {
            stmt.bindString(2, ap);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(3, mac);
        }
        stmt.bindLong(4, entity.getTimeStart());
        stmt.bindLong(5, entity.getTimeEnd());
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(6, count);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConnectRelation readEntity(Cursor cursor, int offset) {
        ConnectRelation entity = new ConnectRelation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ap
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mac
            cursor.getLong(offset + 3), // timeStart
            cursor.getLong(offset + 4), // timeEnd
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConnectRelation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMac(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeStart(cursor.getLong(offset + 3));
        entity.setTimeEnd(cursor.getLong(offset + 4));
        entity.setCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConnectRelation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConnectRelation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
